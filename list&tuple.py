# -*- coding: utf-8
# =============================================================================
# a=4**3
# print (a)
# =============================================================================
#print('今天天气不错sunny day')

# =============================================================================
# a=ord('中')
# print(a)
# =============================================================================
# =============================================================================
# a=chr(25992)
# print(a)
# =============================================================================
# =============================================================================
# x = b'ABC'
# print(x)
# =============================================================================''
#x='ABC'.encode('ascii')
#x='中文'.encode('ascii')
#x='中文'.encode('utf-8')
#x=b'ABC'.decode('ascii')
#x=b'\xe4\xb8\xad\xe6\x96\x87'.decode('ascii')
#x=len('ABCzhibuzhi')
#x=len('中文'.encode('utf-8'))
#print('hello,%s'%'world')
#print('hi,%s,you have $%d'%('Mia',10000))

#list列表实验
classmate=['M','C','T']#一个list
# =============================================================================
# print(classmate[0])
# print(classmate[1])#列表
# print(len(classmate))#列表长度
# print(classmate[-1])#直接取list最后一个元素
# print(classmate[-2])#倒数第二个元素
# =============================================================================
# =============================================================================
# #list是一个可变的有序表，所以，可以往list中追加元素到末尾
# classmate.append('Y')
# print(classmate)
# =============================================================================

# =============================================================================
#也可以把元素插入到指定的位置，比如索引号为2的位置
# classmate.insert(2,'J')
# print(classmate)
#  
# #要删除list末尾的元素，用pop()方法
# classmate.pop()
# print(classmate)
# #要删除指定位置的元素，用pop(i)方法，其中i是索引位置
# classmate.pop(0)
# print(classmate)
# #要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：
# classmate[0]='P'
# print(classmate)
# #list里面的元素的数据类型也可以不同
# M=['pony',123,True]
# print(M)
# #list元素也可以是另一个list
# L = ['python', 'java', M, 'scheme']
# print(L[1])
# print(len(L))
# print(L[2][0])
# =============================================================================

# =============================================================================
# #元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改,没有append()，insert()这样的方法
# classmate=('M','C','T')
# #获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素
# print(classmate[0])
# #只有1个元素的tuple定义时必须加一个逗号,
# T=(1,)
# print(T)
# #’可变‘的元祖，表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。
# m=('m',['A','B'],'c','t')
# print(m)
# m[1][0]='X'
# m[1][1]='Y'
# print(m)
# =============================================================================

#练习
#用索引取出下面list的指定元素：
L = [
    ['Apple', 'Google', 'Microsoft'],
    ['Java', 'Python', 'Ruby', 'PHP'],
    ['Adam', 'Bart', 'Lisa']
]

# 打印Apple:
print(L[0][0])
# 打印Python:
print(L[1][1])
# 打印Lisa:
print(L[2][2])












































